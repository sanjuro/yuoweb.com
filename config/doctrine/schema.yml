Advert:
  actAs: 
    Timestampable: ~ 
    Searchable:
       fields: [title, description]  
  columns:
    id:                     { type: integer, primary: true, autoincrement: true }
    title:                  { type: string(200) }
    description:            { type: string(200) }
    url:                    { type: string(200) }
    image_path:             { type: string(200) }

AdvertNetwork:
  actAs: 
    Timestampable: ~ 
  columns:
    id:               { type: integer, primary: true, autoincrement: true }
    advert_id:        { type: integer }
    network_id:       { type: integer }
    click_count:      { type: integer, notnull: true, default: 2 }
    position:         { type: integer }
    is_active:        { type: boolean, notnull: true, default: 0 }
  relations:
    Network:  { class: Network, onDelete: CASCADE, local: network_id, foreign: id }
    Advert:   { class: Advert, onDelete: CASCADE, local: advert_id, foreign: id }
    
Client:
  actAs: { Timestampable: ~ }
  columns:
    user_id:       { type: integer, notnull: true }
    fullname:      { type: string(255) }
    logo:          { type: string(255) }
    url:           { type: string(255) }
    email:         { type: string(255) } 
    description:   { type: string(255) }
    token:         { type: string(255), notnull: true, unique: true }
    is_activated:  { type: boolean, notnull: true, default: 1 }
  relations:
    sfGuardUser:   { local: user_id, foreign: id }
    
Connection:
  columns:
    id:                  { type: integer, primary: true, autoincrement: true }
    owner_id:            { type: integer }
    reciever_id:         { type: integer }
    owner_response:      { type: integer, default: 1 }
    reciever_response:   { type: integer, default: 2 }
    type_id:             { type: integer }
    state_id:            { type: integer }
  relations:
    ConnectionType:    { class: ConnectionType, local: type_id, foreign: id }
    ConnectionState:   { class: ConnectionState, local: state_id, foreign: id }
    Owner:             { class: sfGuardUser, onDelete: CASCADE, local: owner_id, foreign: id }
    Reciever:          { class: sfGuardUser, onDelete: CASCADE, local: reciever_id, foreign: id }
    OwnerResponse:     { class: ConnectionResponse, local: owner_response, foreign: id }
    RecieverResponse:  { class: ConnectionResponse, local: reciever_response, foreign: id }
    
ConnectionType: 
  columns:
    title:       { type: string(255), notnull: true }
    
ConnectionState: 
  columns:
    title:       { type: string(255), notnull: true }  
    
ConnectionResponse: 
  columns:
    title:       { type: string(255), notnull: true } 
    
Feature:
  actAs: 
    Timestampable: ~
  columns:
    title:         { type: string(255), notnull: true }
    description:   { type: string(400), notnull: true }
    url:           { type: string(100), notnull: true }
    
Follow:
  actAs: 
    Timestampable: ~
    Searchable:
       fields: [follower_id, following_id] 
  columns:
    id:                  { type: integer, primary: true, autoincrement: true }
    follower_id:         { type: integer }
    following_id:        { type: integer }
  relations:
    Follower:           { class: sfGuardUser, onDelete: CASCADE, local: follower_id, foreign: id }
    Following:          { class: sfGuardUser, onDelete: CASCADE, local: following_id, foreign: id }
    
Network:
  actAs: 
    Timestampable: ~
    Sluggable:
      unique: true
      fields: [title]
      canUpdate: true
    CountCache:
      relations:
        Client:
          columnName: network_count
          foreignAlias: Networks
  columns:
    client_id:           { type: integer, notnull: true }
    networktype_id:      { type: integer, notnull: true }
    networkcategory_id:  { type: integer, notnull: true }
    subdomain:           { type: string(255), notnull: true }
    title:               { type: string(255), notnull: true }
    description:         { type: string(4000), notnull: true }
    feature_count:       { type: integer, default: 3 } 
    user_count:          { type: integer, default: 0 } 
    logo:                { type: string(255) }
    accesskey:           { type: string(255), default: 0 }
    is_public:           { type: boolean, notnull: true, default: 1 }
    is_activated:        { type: boolean, notnull: true, default: 0 }
    expires_at:          { type: timestamp, notnull: true }
  relations:
    Client:          { class: Client, local: client_id, foreign: id, onDelete: CASCADE, foreignAlias: Networks } 
    NetworkType:     { class: NetworkType, local: networktype_id, foreign: id }
    NetworkCategory: { class: NetworkCategory, local: networkcategory_id, foreign: id }
  indexes:
    subdomain_index:
      fields:   [subdomain]
      type:     unique
    slug_index:
      fields:   [slug, id]
      type:     unique
      
NetworkCategory:
  columns:
    title:       { type: string(255), notnull: true }
    
NetworkType:
  columns:
    title:       { type: string(255), notnull: true }
    
NetworkFeature:
  columns:
    id:          { type: integer, primary: true, autoincrement: true }
    network_id:  { type: integer }
    feature_id:  { type: integer }
    active:      { type: integer, notnull: true, default: 2 }
    position:    { type: integer, notnull: true }
  relations:
    Network:  { class: Network, onDelete: CASCADE, local: network_id, foreign: id }
    Feature:  { class: Feature, onDelete: CASCADE, local: feature_id, foreign: id }
    
NetworkUser:
  actAs: 
    Timestampable: ~ 
    CountCache:
      relations:
        Network:
          columnName: user_count
          foreignAlias: NetworkUser
  columns:
    id:           { type: integer, primary: true, autoincrement: true }
    network_id:   { type: integer }
    user_id:      { type: integer }
    is_private:   { type: boolean, notnull: true, default: 0 }
  relations:
    Network:     { class: Network, onDelete: CASCADE, local: network_id, foreign: id }
    sfGuardUser: { class: sfGuardUser, onDelete: CASCADE, local: user_id, foreign: id }
    
Notification:
  actAs: 
    Timestampable: ~
    Searchable:
       fields: [user_id, notificationtype_id] 
  columns:
    id:                  { type: integer, primary: true, autoincrement: true }
    network_id:          { type: integer }
    user_id:             { type: integer }
    description:         { type: string(255) }
    notificationtype_id: { type: integer }
    lasttime_read:       { type: timestamp, notnull: true }
  relations:
    Network:          { class: Network, onDelete: CASCADE, local: network_id, foreign: id }
    sfGuardUser:      { class: sfGuardUser, onDelete: CASCADE, local: user_id, foreign: id }
    NotificationType: { class: NotificationType, onDelete: CASCADE, local: notificationtype_id, foreign: id }
    
NotificationType:
  columns:
    title:       { type: string(255), notnull: true }
    
UserProfile:
  actAs:
    Timestampable: ~
    Searchable:
       fields: [sfuser_id, mobile_no]
  columns:
    id:               { type: integer, primary: true, autoincrement: true }
    sfuser_id:        { type: integer }
    mobile_no:        { type: string(255) }
    description:      { type: string(255) }
    profile_pic:      { type: string(255), default: default_profile_pic.gif }
    gender_id:        { type: integer }
    city:             { type: string(255) }
    country:          { type: string(255) }
    birthday:         { type: timestamp, notnull: true }
    is_private:       { type: boolean, default: 0 }
  relations:
    sfGuardUser:      { class: sfGuardUser, onDelete: CASCADE, local: sfuser_id, foreign: id }
    Gender:           { class: Gender, local: gender_id, foreign: id }
    
Gender:
  columns:
    title:            { type: string(255), notnull: true }
    
    
Feed:
  actAs: 
   Timestampable: ~ 
   Commentable: ~
  columns:
    id:                     { type: integer, primary: true, autoincrement: true }
    user_id:                { type: integer }
    feedtype_id:            { type: integer }
    body:                   { type: string(160) }
    htmlbody:               { type: string(255) }  
  relations:
    sfGuardUser:            { class: sfGuardUser, onDelete: CASCADE, local: user_id, foreign: id }
    FeedType:               { class: FeedType, local: feedtype_id, foreign: id }
    
FeedType:
  actAs: 
   Timestampable: ~ 
  columns:
    id:                     { type: integer, primary: true, autoincrement: true }
    title:                  { type: string(160) }
    
Message:
  actAs: { Timestampable: ~ }
  columns:
    id:                     { type: integer, primary: true, autoincrement: true }
    subject:                { type: string(100) }
    body:                   { type: string(255) }
    htmlbody:               { type: string(255) }  
    user_id:                { type: integer }
    network_id:             { type: integer }
  relations:
    sfGuardUser:         { local: user_id, foreign: id }
    Network:             { class: Network, local: network_id, foreign: id }
    
MessageReciever:
  actAs: { Timestampable: ~ }
  columns:
    id:                  { type: integer, primary: true, autoincrement: true }
    message_id:          { type: integer }
    user_id:             { type: integer } 
    messagestatus_id:    { type: integer }
  relations:
    sfGuardUser:      { local: user_id, foreign: id }
    Message:          { class: Message, onDelete: CASCADE, local: message_id, foreign: id }
    MessageStatus:    { class: MessageStatus, local: messagestatus_id, foreign: id } 
    
MessageStatus:
  columns:
    title:         { type: string(255), notnull: true }
    
    
Photo:
  actAs: 
   Timestampable: ~ 
   Commentable: ~
  columns:
    id:                     { type: integer, primary: true, autoincrement: true }
    url:                    { type: string(100) }
    network_id:             { type: integer }
    user_id:                { type: integer }
    view_count:             { type: integer, default: 0 }
    is_private:             { type: boolean, default: 0 }
  relations:
    sfGuardUser:            { local: user_id, foreign: id }
    Network:                { class: Network, local: network_id, foreign: id }

PhotoLink:
 columns:
    id:                  { type: integer, primary: true, autoincrement: true }
    photo_id:            { type: integer }
    gallery_id:          { type: integer }
 relations:
    Photo:               { class: Photo, local: photo_id, foreign: id  }
    PhotoGallery:        { class: PhotoGallery, local: gallery_id, foreign: id  }

PhotoGallery:
  actAs: { Timestampable: ~ }
  columns:
    id:                     { type: integer, primary: true, autoincrement: true }
    title:                  { type: string(200) }
    network_id:             { type: integer }
    user_id:                { type: integer }
    photo_count:            { type: integer, default: 0 } 
    is_private:             { type: boolean, default: 0 }
  relations:
    sfGuardUser:            { local: user_id, foreign: id }
    Network:                { class: Network, local: network_id, foreign: id }
    
PhotoView:
  columns:
    id:          { type: integer, primary: true, autoincrement: true }
    network_id:  { type: integer }
    photo_id:    { type: integer }
    has_viewed:      { type: integer, notnull: true, default: 2 }
  relations:
    Network:  { class: Network, onDelete: CASCADE, local: network_id, foreign: id }
    Photo:    { class: Feature, onDelete: CASCADE, local: photo_id, foreign: id }
       

Event:
  actAs: 
    Timestampable: ~
    Searchable:
       fields: [title, description]
    SoftDelete: ~
    Sluggable:
      unique: true
      fields: [title]
      canUpdate: true
  columns:
    id:                     { type: integer, primary: true, autoincrement: true }
    networkuser_id:         { type: integer }
    network_id:             { type: integer } 
    eventtype_id:           { type: integer }
    title:                  { type: string(100) }
    description:            { type: string(200) }
    accept_count:           { type: integer } 
    accept_limit:           { type: integer }
    address:                { type: string(200) }
    g_lat:                  { type: integer }
    g_long:                 { type: integer }
    contact_no:             { type: string(200) }
    start_at:               { type: timestamp }
    end_at:                 { type: timestamp }
    is_private:             { type: boolean, default: 0 }
  relations:
    Network:             { class: Network, local: network_id, foreign: id  }
    NetworkUser:         { class: NetworkUser, local: networkuser_id, foreign: id  }
    EventType:           { class: EvenetType, local: eventtype_id, foreign: id  }
  
EventType:
  columns:
    title:         { type: string(255), notnull: true }
    
EventInvite:
  actAs: 
    Timestampable: ~
  columns:
    id:                     { type: integer, primary: true, autoincrement: true }
    event_id:               { type: integer }
    networkuser_id:         { type: integer }
  relations:
    Event:                  { class: Event, local: event_id, foreign: id  }
    NetworkUser:            { class: NetworkUser, local: networkuser_id, foreign: id  }

